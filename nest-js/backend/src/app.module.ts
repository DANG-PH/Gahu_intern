import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { UserModule } from './user/user.module';
import { ItemModule } from './item/item.module';

@Module({
  imports: [
    TypeOrmModule.forRoot({
      type: 'mysql',
      host: process.env.DB_HOST || 'localhost',   // üëà l·∫•y t·ª´ env
      port: parseInt(process.env.DB_PORT ?? '3307', 10),
      username: process.env.DB_USER || 'root',
      password: process.env.DB_PASS || 'Phamhaidang112@',
      database: process.env.DB_NAME || 'gahu_intern',
      entities: [__dirname + '/**/*.entity{.ts,.js}'],
      synchronize: true,
    }),
    UserModule,
    ItemModule,
  ],
})
export class AppModule {}

// Method	    Ch·ª©c nƒÉng	      Scope
// forRoot()	
// K·∫øt n·ªëi DB to√†n c·ª•c	       
// AppModule (1 l·∫ßn)

// forFeature([Entity])
// ƒêƒÉng k√Ω repository c·ªßa entity cho module con	
// Module con, ƒë·ªÉ inject @InjectRepository(Entity)

// TypeOrmModule.forRoot() kh√¥ng ph·∫£i ch·ªâ ‚Äúimport module‚Äù b√¨nh th∆∞·ªùng.

// N√≥ thi·∫øt l·∫≠p k·∫øt n·ªëi t·ªõi database to√†n c·ª•c.

// M·ªói module con (UserModule, AuthModule‚Ä¶) s·∫Ω d√πng k·∫øt n·ªëi n√†y khi b·∫°n forFeature([Entity]).


// Flow:

// AppModule ‚Üí forRoot() t·∫°o DB connection.

// UserModule ‚Üí forFeature([User]) t·∫°o repository User.

// UserService ‚Üí @InjectRepository(User) nh·∫≠n repository ƒë·ªÉ thao t√°c DB.

// UserController ‚Üí g·ªçi service, tr·∫£ d·ªØ li·ªáu cho client.